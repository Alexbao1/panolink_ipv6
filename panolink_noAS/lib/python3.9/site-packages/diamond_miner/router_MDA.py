import os
from dataclasses import dataclass
from pych_client import ClickHouseClient
from collections import defaultdict
from typing import Iterable, Iterator, Tuple
from ipaddress import ip_network, IPv6Network, IPv4Network
from diamond_miner.defaults import (
    DEFAULT_FAILURE_RATE,
    DEFAULT_PREFIX_LEN_V4,
    DEFAULT_PREFIX_LEN_V6,
    PROTOCOLS,
    UNIVERSE_SUBSET,
)
from diamond_miner.format import format_ipv6
from diamond_miner.generators.standalone import split_prefix
from diamond_miner.insert import InsertPreProbes,InsertByPreProbes
from diamond_miner.queries.query import Query, links_table, probes_table
from diamond_miner.subsets import subsets_for
from diamond_miner.typing import IPNetwork
import time
import math
## TODO : rewrite this function using asprobes inner join group_mapping
def router_MDA(client: ClickHouseClient, 
                    measurement_id: str, 
                    round_: int,
                    prefix_len_v4: int = DEFAULT_PREFIX_LEN_V4,
                    prefix_len_v6: int = DEFAULT_PREFIX_LEN_V6
                    ):
    
    client.json(f"""
    INSERT INTO {probes_table(measurement_id)}
    WITH
        link AS ( 
            SELECT *, toIPv6(arrayStringConcat(arraySlice(splitByChar('.', toString(probe_dst_addr)), 1, 3), '.') || '.0') as probe_dst_prefix 
            FROM {links_table(measurement_id)} 
            WHERE near_ttl>5
        )
        , no_MDA_router AS (
            SELECT near_ttl, near_addr FROM (
                SELECT 
                    near_ttl, near_addr, 
                    count(DISTINCT far_addr) as cnt_next_hop, 
                    toUInt32(ceil(ln(0.05 / (cnt_next_hop + 1)) / ln( cnt_next_hop / (cnt_next_hop+ 1) ))) as MDA, 
                    count(DISTINCT probe_dst_addr, probe_src_port) as cnt_flow 
                FROM link
                GROUP BY near_ttl, near_addr
            )
            WHERE MDA > cnt_flow
        )
        , no_MDA_link AS (
            SELECT DISTINCT near_ttl, probe_dst_prefix, near_addr, far_addr 
            FROM no_MDA_router 
            LEFT JOIN link
            USING near_ttl, near_addr
        )
        , no_MDA_dst AS (
            SELECT near_ttl, probe_dst_prefix, count(DISTINCT near_addr, far_addr) as cnt 
            FROM no_MDA_link 
            GROUP BY near_ttl, probe_dst_prefix
        )
        , ttldst AS (
            SELECT DISTINCT near_ttl, greedy_dst as probe_dst_prefix FROM (
                SELECT 
                    near_ttl, near_addr, far_addr, 
                    max((cnt,probe_dst_prefix)) as greedy_tuple, 
                    greedy_tuple.2 as greedy_dst 
                FROM no_MDA_link 
                LEFT JOIN no_MDA_dst 
                USING near_ttl, probe_dst_prefix
                GROUP BY near_ttl, near_addr, far_addr
            )
        )
        , dstMDA AS ( 
            SELECT near_ttl, probe_dst_prefix
            , count(DISTINCT near_addr, far_addr) as cnt, toUInt32(ceil(ln(0.05 / (cnt + 1)) / ln( cnt / (cnt+ 1) ))) as MDA
            FROM ttldst 
            LEFT JOIN link as l
            on ttldst.near_ttl=l.near_ttl AND ttldst.probe_dst_prefix=toIPv6(arrayStringConcat(arraySlice(splitByChar('.', toString(l.probe_dst_addr)), 1, 3), '.') || '.0')
            GROUP BY near_ttl, probe_dst_prefix
        )    
    SELECT 17 AS probe_protocol, probe_dst_prefix, arrayJoin([near_ttl,near_ttl+1]) as probe_ttl, sum(MDA) as cumulative_probes, {round_} as round 
    FROM dstMDA     
    GROUP BY probe_protocol, probe_dst_prefix, probe_ttl, round
    """)
