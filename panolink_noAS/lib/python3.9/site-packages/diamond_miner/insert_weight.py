import os
from dataclasses import dataclass
from pych_client import ClickHouseClient
from collections import defaultdict
from typing import Iterable, Iterator, Tuple
from ipaddress import ip_network, IPv6Network, IPv4Network
from diamond_miner.defaults import (
    DEFAULT_FAILURE_RATE,
    DEFAULT_PREFIX_LEN_V4,
    DEFAULT_PREFIX_LEN_V6,
    PROTOCOLS,
    UNIVERSE_SUBSET,
)
from diamond_miner.format import format_ipv6
from diamond_miner.generators.standalone import split_prefix
from diamond_miner.insert import InsertPreProbes,InsertByPreProbes
from diamond_miner.queries.query import Query, weight_table, clusterprobes_table, links_table
from diamond_miner.subsets import subsets_for
from diamond_miner.typing import IPNetwork
import time
import math
## TODO : rewrite this function using asprobes inner join group_mapping
def insert_weight(client: ClickHouseClient, 
                    measurement_id: str, 
                    round_: int,
                    prefix_len_v4: int = DEFAULT_PREFIX_LEN_V4,
                    prefix_len_v6: int = DEFAULT_PREFIX_LEN_V6,
                    change_round: int = 6):
    
    changeable_weight_query = f""
    if round_<=change_round:
        changeable_weight_query = f"""
            link AS(
                SELECT 
                    toIPv6(arrayStringConcat(arraySlice(splitByChar('.', toString(probe_dst_addr)), 1, 3), '.') || '.0') AS probe_dst_prefix, 
                    near_ttl, 
                    far_ttl, 
                    near_addr, 
                    far_addr 
                FROM {links_table(measurement_id)}
                WHERE gen_round={round_-1}
            )
            , dst_link AS (
                SELECT 
                    '1' as cluster_id,
                    probe_dst_prefix, 
                    near_ttl, 
                    far_ttl, 
                    length(groupUniqArray((near_addr,far_addr))) as weight 
                FROM link 
                GROUP BY probe_dst_prefix, near_ttl, far_ttl
            )"""
    else:
        changeable_weight_query = f"""
            link AS (
                SELECT 
                    arrayJoin(list_probe_dst_prefix) as probe_dst_prefix, 
                    near_ttl, 
                    far_ttl, 
                    sum(contribution) as weight 
                FROM (
                    SELECT 
                        groupUniqArray(toIPv6(arrayStringConcat(arraySlice(splitByChar('.', toString(probe_dst_addr)), 1, 3), '.') || '.0')) AS list_probe_dst_prefix, 
                        near_ttl, 
                        far_ttl, 
                        near_addr, 
                        far_addr, 
                        1/length(list_probe_dst_prefix) as contribution 
                    FROM {links_table(measurement_id)}
                    WHERE gen_round={round_-1}
                    GROUP BY near_ttl, far_ttl, near_addr, far_addr
                )
                GROUP BY probe_dst_prefix, near_ttl, far_ttl
            )
            , dst_link AS (
                SELECT 
                    '1' as cluster_id, 
                    probe_dst_prefix, 
                    near_ttl, 
                    far_ttl, 
                    sum(weight) as weight 
                FROM link 
                GROUP BY probe_dst_prefix, near_ttl, far_ttl
            )"""

    client.json(f"""
    INSERT INTO {weight_table(measurement_id)}
        WITH
        {changeable_weight_query}
        , tmp1 AS (
            SELECT 
                cluster_id,
                near_ttl, 
                far_ttl, 
                probe_dst_prefix, 
                weight
            FROM dst_link 
        )
        , tmp2 AS (
            SELECT 
                cluster_id,
                near_ttl, 
                far_ttl, 
                sum(weight) AS total 
            FROM tmp1
            GROUP BY cluster_id, near_ttl, far_ttl
        )
        , tmp3 AS (
            SELECT *,weight/total as proportion 
            FROM tmp1 
            LEFT JOIN tmp2 
            USING cluster_id, near_ttl, far_ttl
        )

        SELECT 
            cluster_id, 
            arrayJoin([near_ttl, far_ttl]) as probe_ttl, 
            probe_dst_prefix, 
            max(proportion) as proportion, 
            {round_} as round
        FROM tmp3
        GROUP BY cluster_id, probe_ttl, probe_dst_prefix
        
    """)
